---

- name: Create group for Airflow
  group:
    name: '{{ airflow_group }}'
    state: present

- name: Create user for Airflow
  user:
    name: '{{ airflow_user }}'
    group: '{{ airflow_group }}'
    home: '{{ airflow_home }}'
  when: airflow_user != 'vagrant'

- name: Create airflow home
  file:
    path: '{{ airflow_home}}'
    state: directory
    owner: '{{ airflow_user }}'

- name: Install required Debian packages
  apt:
    pkg: '{{ item }}'
    state: present
    update_cache: yes
    cache_valid_time: 600
  with_items: "{{ airflow_deb_packages }}"

- name: Install required Python packages
  pip:
    name: '{{ item }}'
    state: present
  with_items: "{{ airflow_pip_packages }}"

- name: Install required Debian packages for plugins
  apt:
    pkg: '{{ item }}'
    state: present
    update_cache: yes
    cache_valid_time: 600
  with_flattened: "{{ airflow_plugins|map(attribute='required_debs')|list }}"

- name: Install required Python packages for plugins
  pip:
    name: '{{ item }}'
    state: present
  with_flattened: "{{ airflow_plugins|map(attribute='required_pips')|list }}"

- name: Install airflow (first time installation takes a long time)
  pip:
    name: 'airflow=={{ airflow_version }}'
    state: present

- name: Install airflow plugins
  pip:
    name: 'airflow[{{ item.name }}]=={{ airflow_version }}'
    state: present
  with_items: "{{ airflow_plugins }}"

- name: Generate Fernet key
  ferney_key:
    config_file: '{{ airflow_config}}'

- name: Setup configuration for airflow
  template:
    src: airflow.cfg.j2
    dest: '{{ airflow_config}}'
    owner: '{{ airflow_user }}'

- name: Remove uncompatible DAG example (example_twitter_dag.py)
  file:
    path: /usr/local/lib/python2.7/dist-packages/airflow/example_dags/example_twitter_dag.py
    state: absent

- name: Launch Airflow Initdb
  command: "/usr/local/bin/airflow initdb"
  register: airflow_initdb_result
  environment:
    AIRFLOW_HOME: "{{ airflow_home }}"
    PYTHONPATH: "{{ airflow_python_path }}"
  become: true
  become_user: '{{ airflow_user }}'
#  changed_when: "airflow_initdb_result.failed or airflow_initdb_result.stdout.find('Running upgrade') >= 0"

- debug: var=airflow_initdb_result

- name: Launch Airflow Upgradedb
  command: "/usr/local/bin/airflow upgradedb"
  register: airflow_upgradedb_result
  environment:
    AIRFLOW_HOME: "{{ airflow_home }}"
    PYTHONPATH: "{{ airflow_python_path }}"
  become: true
  become_user: '{{ airflow_user }}'
  changed_when: "airflow_upgradedb_result.failed or airflow_upgradedb_result.stdout.find('Running upgrade') >= 0"

- include: marathon.yml
  when: airflow_startup == 'marathon'
