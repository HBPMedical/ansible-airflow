#!{{ airflow_python }}
# {{ ansible_managed }}

from sqlalchemy import create_engine
from sqlalchemy.ext.automap import automap_base
from sqlalchemy import orm

from airflow import configuration

Base = automap_base()
engine = create_engine(configuration.get('core', 'SQL_ALCHEMY_CONN'))
Base.prepare(engine, reflect=True)

SlotPool = Base.classes.slot_pool
Variable = Base.classes.variable

db_session = orm.Session(engine)

def get_or_create_slot_pool(pool, slots, description):
    instance = db_session.query(SlotPool).filter_by(pool=pool).first()
    if instance:
        return instance
    else:
        instance = SlotPool(pool=pool, slots=slots, description=description)
        db_session.add(instance)
        db_session.commit()
        return instance

def get_or_create_variable(key, val, is_encrypted=False):
    instance = db_session.query(Variable).filter_by(key=key).first()
    if instance:
        return instance
    else:
        instance = Variable(key=key, val=val, is_encrypted=is_encrypted)
        db_session.add(instance)
        db_session.commit()
        return instance

{% for pool in airflow_slot_pools %}
get_or_create_slot_pool("{{ pool.name }}", {{ pool.slots }}, "{{ pool.description | default("") }}")
{% endfor %}

{% for v in airflow_variables %}
get_or_create_variable("{{ v.key }}", "{{ v.value }}")
{% endfor %}
